* Unit 1.1: Boolean Logic
** Commutative Law
** Associative Law
** Distributive Law
** De Morgan Laws
- NOT(x AND y) = NOT(x) OR NOT(y)
- NOT(x OR y) = NOT(x) AND NOT(y)

* Unit 1.2: Boolean Functions Synthesis
** NAND
| x | y | NAND |
| 0 | 0 |    1 |
| 0 | 1 |    1 |
| 1 | 0 |    1 |
| 1 | 1 |    0 |
- (x NAND y) = NOT(x AND y)
*** Any boolean function can be represented using an expression containing only NAND operations.
- NOT(x) = (x NAND x)
- (x AND y) NOT(x NAND y)

* Unit 1.3: Logic Gates

* Unit 1.4: Hardware Description Language
** Example of XOR gate in HDL
/** Xor gate: out = (a And Not(b)) Or (Not(a) And b)) */
CHIP Xor {
    IN a, b;
    OUT out;

    PARTS:
    Not (in=a, out=nota);
    Not (in=b, out=notb);
    And (a=a, b=notb, out=aAndNotb);
    And (a=nota, b=b, out=notaAndb);
    Or (a=aAndNotb, b=notaAndb, out=out);
}
** HDL is functional/declarative (order of statements doesn't matter)

* Unit 1.5: Hardware Simulation
